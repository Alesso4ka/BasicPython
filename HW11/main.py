# Урок 11. ООП. Полезные дополнения
# 1. Реализовать класс «Дата», функция-конструктор которого должна принимать дату в виде строки формата «день-месяц-год». В рамках класса реализовать два метода. Первый, с декоратором @classmethod. Он должен извлекать число, месяц, год и преобразовывать их тип к типу «Число». Второй, с декоратором @staticmethod, должен проводить валидацию числа, месяца и года (например, месяц — от 1 до 12). Проверить работу полученной структуры на реальных данных.

class Date():
    def __init__(self, str_DMY: str = ''):
        pass

    @classmethod
    def parce(cls, date = ''):
        """Преобразует дату в формате «день-месяц-год» в кортеж «день, месяц, год»"""
        ar = date.split('-')
        return Date.validate(ar[0], ar[1], ar[2])

    @staticmethod
    def validate(day: int = 0, month: int = 0, year: int = 0) -> list:
        """Проверяет дату на достоверность (только в диапазонах значений!)"""
        day = Date.clear_int_str(day)
        month = Date.clear_int_str(month)
        year = Date.clear_int_str(year)

        return (day if 0 < day and day <= 31 else 1,
                month if 0 < day and day <= 12 else 1,
                year if 1900 < day and day <= 2100 else 1900)

    @staticmethod
    def clear_int_str(str: str = '') -> int:
        """Интерпретирует строку как целое положительное значение (включая ноль). Если не получается это сделать, то возвращает ноль"""
        try:
            i = int(str)
        except:
            return 0
        return i if i > 0 else 0

d = Date('5-10-2002')
print(Date.validate(5, 10, 2002))
print(Date.parce('5-10-2002'))


# 2. Создайте собственный класс-исключение, обрабатывающий ситуацию деления на ноль. Проверьте его работу на данных, вводимых пользователем. При вводе нуля в качестве делителя программа должна корректно обработать эту ситуацию и не завершиться с ошибкой.

class ZeroDivision(Exception):
    def __init__(self):
        print('Деление на ноль')

a = 1
b = 0

try:
    if b == 0:
        raise ZeroDivision
    else:
        print(a / b)
except ZeroDivision as e:
    pass


# 3. Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел. Проверить работу исключения на реальном примере. Запрашивать у пользователя данные и заполнять список необходимо только числами. Класс-исключение должен контролировать типы данных элементов списка.
# Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно, пока пользователь сам не остановит работу скрипта, введя, например, команду «stop». При этом скрипт завершается, сформированный список с числами выводится на экран.
# Подсказка: для этого задания примем, что пользователь может вводить только числа и строки. Во время ввода пользователем очередного элемента необходимо реализовать проверку типа элемента. Вносить его в список, только если введено число. Класс-исключение должен не позволить пользователю ввести текст (не число) и отобразить соответствующее сообщение. При этом работа скрипта не должна завершаться.

import sys

class OnlyInt(Exception):
    def __init__(self, txt):
        print('В списке должны быть только числа!')

    @staticmethod
    def check(list_in: list = []) -> bool:
        return False if sum([True for i in list_in if not str(i).isnumeric()]) > 0 else True


print('Введите числа, которые нужно добавить в список. Либо "stop" для прерывания процесса.')
a = []
for line in sys.stdin:
    if line.rstrip('\n') == 'stop': break
    try:
        ar = line.split()
        if OnlyInt.check(ar) == False:
            raise OnlyInt(ar)
        else:
            a.extend(ar)
    except OnlyInt as e:
        pass

print(f'Получился список: {a}')



# 4. Начните работу над проектом «Склад оргтехники». Создайте класс, описывающий склад. А также класс «Оргтехника», который будет базовым для классов-наследников. Эти классы — конкретные типы оргтехники (принтер, сканер, ксерокс). В базовом классе определите параметры, общие для приведённых типов. В классах-наследниках реализуйте параметры, уникальные для каждого типа оргтехники.

# 5. Продолжить работу над первым заданием. Разработайте методы, которые отвечают за приём оргтехники на склад и передачу в определённое подразделение компании. Для хранения данных о наименовании и количестве единиц оргтехники, а также других данных, можно использовать любую подходящую структуру (например, словарь).

# 6. Продолжить работу над вторым заданием. Реализуйте механизм валидации вводимых пользователем данных. Например, для указания количества принтеров, отправленных на склад, нельзя использовать строковый тип данных.
# Подсказка: постарайтесь реализовать в проекте «Склад оргтехники» максимум возможностей, изученных на уроках по ООП.


class Warehouse():
    """Склад оргтехники"""
    def __init__(self):
        self.store = {} # данные о содержимом склада
        # Формат хранения данных:
        # {
        #     1: { # id предмета - целое число
        #         'name': 'принтер', # наименование
        #         'count': 1, # количество
        #         'user': '' # департамент, где используется
        #     }
        # }

    def add(self, **kwargs):
        """приём оргтехники на склад"""
        a = {
            self.last_id+1:{
                'name': kwargs['name'], # наименование
                'count': self.clear_int_str(kwargs['count']) # количество
            }
        }
        self.store.update(a)

    def use(self, name, to_department):
        """передача в определённое подразделение компании"""
        for id, val in self.store.items():
            if name == val['name']:
                val['user'] = to_department

    def show(self):
        """показатьт склад"""
        print(self.store)

    @property
    def last_id(self):
        """получить последний id"""
        if not self.store:
            return 0
        else:
            return sorted(self.store.items(), key=lambda x: x[0])[-1][0]

    @staticmethod
    def clear_int_str(str: str = '') -> int:
        """Интерпретирует строку как целое положительное значение (включая ноль). Если не получается это сделать, то возвращает ноль"""
        try:
            i = int(str)
        except:
            return 0
        return i if i > 0 else 0

class Equipment():
    """Оргтехника"""
    def __init__(self):
        pass

class Printer(Equipment):
    """принтер"""
    def __init__(self):
        super().__init__()
        pass

class Scaner(Equipment):
    """сканер"""
    def __init__(self):
        super().__init__()
        pass

class Xerox(Equipment):
    """ксерокс"""
    def __init__(self):
        super().__init__()
        pass


w = Warehouse()
w.add(name = 'принтер', count = 1)
w.use(name = 'принтер', to_department = 'HR')
print(w.last_id)
w.show()
